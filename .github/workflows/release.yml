name: Releases Building CI

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write
  checks: write
  id-token: write

jobs:
  validate_release_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch name
        run: |
          branch_name="${{ github.ref_name }}"
          if [[ "$branch_name" == 'main' ]]; then
            echo "'$branch_name' is valid."
          else
            echo "Error: '$branch_name' is not valid."
          fi

  quality_check:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: validate_release_branch

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ vars.GO_VERSION }}

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: golangci-lint run ./...

      - name: Run Unit Tests
        run: go test ./...

  e2e_tests:
    needs: validate_release_branch
    uses: ./.github/workflows/e2e.yml

  release:
    needs:
      - quality_check
      - e2e_tests
    name: Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Install Semantic Release
        run: |
          npm install -g semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/github \
            @semantic-release/git \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: Run Semantic Release (Create Tag)
        env:
          GITHUB_TOKEN: ${{ vars.GH_TOKEN_SEMANTIC_RELEASE }}
        run: npx semantic-release

      - name: Set Up Go Environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ vars.GO_VERSION }}

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Build Go Binaries with Version Tag
        run: |
          # Fetch the latest tags to ensure we have the newly created tag
          git fetch --tags
          make releases

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ vars.GH_TOKEN_SEMANTIC_RELEASE }}
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"
          
          # Upload all build artifacts to the release
          for file in build/*.zip; do
            if [ -f "$file" ]; then
              echo "Uploading $file to release $LATEST_TAG"
              gh release upload "$LATEST_TAG" "$file" --clobber
            fi
          done
  deploy_doc:
    needs:
      - release
    uses: "./.github/workflows/deploy-docs.yml"
